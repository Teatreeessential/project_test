<h1>프로필 등록 페이지</h1>

<h3>관심 카테고리</h3></br>
<form id="file_form" method="post" action="/users/register" enctype="multipart/form-data">

<select class="category_list">
    <option value="빅데이터">빅데이터</option>
    <option value="웹">웹</option>
    <option value="앱">앱</option>
    <option value="ai">ai</option>
</select>
<!-- 카테고리 달리는 곳  -->
<div class="add_categories">
<%unless @user.categories.empty?%>
    <%@user.categories.each do |category|%>
        <span class="delete_category" data-category_id=<%=category.category_contents%>>
        <%=category.category_contents%>x#
        </span>
    <%end%>
<%end%>
</div></br>

 <!--카테고리 값 받는곳 -->
<input type="hidden" name="category" id="category"value="
<%unless @user.categories.empty?%>
    <%= @user.categories.map{|c| c.category_contents+","}.reduce(:+).gsub(/[,]$/,'') %>
<%end%>
">

<h3>회원 사진 등록</h3></br>

<input type="file" id="profile_picture" name="file_path">


<h3>보유기술스택</h3></br>

<div class="tech">
<input type="text" placeholder="기술" name="tech" class="search">
</div>
<!--스킬 검색창 띄우는곳-->
<div class="add_skill"></div></br>
<!--스킬 뱃지달리는곳-->
<div class="skill_badge">
<%unless @user.skills.empty?%>
    <%@user.skills.each do |skill|%>
        <span class="delete_skill" data-skill_id=<%=skill.skill_contents%>>
        <%=skill.skill_contents%>x#
        </span>
    <%end%>
<%end%>
</div></br>
<!--스킬 값 받는 곳-->
<input type="hidden" name="skill" id="skill" value="
<%unless @user.skills.empty?%>
    <%= @user.skills.map{|c| c.skill_contents+","}.reduce(:+).gsub(/[,]$/,'') %>
<%end%>
">

<h3>자기소개</h3></br>
<textarea rows="4" cols="50" placeholder="자기소개를 입력하세요"class="introduce"name="introduce">
<%unless @user.user_contents.empty?%>
<%=@user.user_contents%>
<%end%>
</textarea>

<h3>생년월일</h3></br>
<p>달력 api</p>
<h3>거주지역</h3></br>

    
    <input type="button" onclick="sample4_execDaumPostcode()" value="우편번호 찾기"><br>
    <p>도로명 주소</p>
    <input type="text" name="road_address"id="sample4_roadAddress" placeholder="도로명주소">
    <p>지번주소</p>
    <input type="text" name="address" id="sample4_jibunAddress" placeholder="지번주소">
    <span id="guide" style="color:#999"></span>

<h3>연락처</h3></br>
<input type="text" class="tel" placeholder="전화번호" name="tel" value="
<%unless @user.tel.empty?%>
<%=@user.tel%>
<%end%>
">
<input type="submit" value="등록하기">

</form>

<script src="https://ssl.daumcdn.net/dmaps/map_js_init/postcode.v2.js"></script>
<script>
function sample4_execDaumPostcode() {
        new daum.Postcode({
            oncomplete: function(data) {
                // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.

                // 도로명 주소의 노출 규칙에 따라 주소를 조합한다.
                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
                var fullRoadAddr = data.roadAddress; // 도로명 주소 변수
                var extraRoadAddr = ''; // 도로명 조합형 주소 변수

                // 법정동명이 있을 경우 추가한다. (법정리는 제외)
                // 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
                if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){
                    extraRoadAddr += data.bname;
                }
                // 건물명이 있고, 공동주택일 경우 추가한다.
                if(data.buildingName !== '' && data.apartment === 'Y'){
                   extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);
                }
                // 도로명, 지번 조합형 주소가 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
                if(extraRoadAddr !== ''){
                    extraRoadAddr = ' (' + extraRoadAddr + ')';
                }
                // 도로명, 지번 주소의 유무에 따라 해당 조합형 주소를 추가한다.
                if(fullRoadAddr !== ''){
                    fullRoadAddr += extraRoadAddr;
                }

                // 우편번호와 주소 정보를 해당 필드에 넣는다.
                document.getElementById('sample4_roadAddress').value = fullRoadAddr;
                document.getElementById('sample4_jibunAddress').value = data.jibunAddress;

                // 사용자가 '선택 안함'을 클릭한 경우, 예상 주소라는 표시를 해준다.
                if(data.autoRoadAddress) {
                    //예상되는 도로명 주소에 조합형 주소를 추가한다.
                    var expRoadAddr = data.autoRoadAddress + extraRoadAddr;
                    document.getElementById('guide').innerHTML = '(예상 도로명 주소 : ' + expRoadAddr + ')';

                } else if(data.autoJibunAddress) {
                    var expJibunAddr = data.autoJibunAddress;
                    document.getElementById('guide').innerHTML = '(예상 지번 주소 : ' + expJibunAddr + ')';

                } else {
                    document.getElementById('guide').innerHTML = '';
                }
            }
        }).open();
    }
    $(document).ready(function(){
       
        
        var find_skill = [];
        var find_category = [];
        $('.delete_category').each(function () {
            find_category.push($(this).attr('data-category_id')); 
        })
          $('.delete_skill').each(function () {
            find_skill.push($(this).attr('data-skill_id')); 
        })
        
        
       
        //스킬 탐색 기능
        $('.search').on('keyup', function(){
            
            var search = $(this).val();
            $.ajax({
                url:'/users/search',
                type:'POST',
                data: {
                    tech: search
                }
                
            })
        })
        
       
        
        //버튼 클릭시 프로젝트 및 파트너 탐색
        $(".submit_skills").on('click',function(){
            if(find_skill.length===0){
                alert('적어도 하나 이상의 기술을 넣어주세요!')
            }else{
                $.ajax({
                    url:'/users/find_skill',
                    type:'POST',
                    data:{find_skill:find_skill}
                })
            }
        })
        
        //스킬 뱃지 달기
        $(document).on('click', '.skill', function(){
           if(find_skill.indexOf($(this).text())>-1){
               alert('중복 값은 불가합니다.');
           }else{
               find_skill.push($(this).text());
               $(".skill_badge").prepend(`<span class='delete_skill'>${$(this).text()}x#</span>`);
               $('#skill').val(find_skill.join(','));
           }
        })
        
        //x를 눌렸을 때 스킬이 제거됨
        $(document).on('click','.delete_skill',function(){
            let selected_skill= $(this).data('skill_id');
            var index =find_skill.indexOf(String(selected_skill));
            find_skill.splice(index,1);
            $('#skill').val(find_skill.join(','));
            $(this).remove();
        })
    
           //카테고리 선택 뱃지 달기
        $(".category_list").on('change',function(){
            let selected_category = $(".category_list option:selected").text();
            let category_id = $(".category_list option:selected").val();
            if(find_category.indexOf(category_id)>-1){
                alert('중복 값은 불가합니다.')
            }else{
                find_category.push(category_id);
                $('#category').val(find_category.join(',')); //카테고리 값 넣는 곳
                $(".add_categories").prepend(`<span class='delete_category' data-category_id="${category_id}">${selected_category}x#</span>`)
            }
           
        })
            //카테고리 선택 뱃지 제거
        $(document).on("click",".delete_category",function(){
            let selected_category= $(this).data('category_id');//number 타입이라 배열은 string임
            let category_id_index= find_category.indexOf(String(selected_category));
            find_category.splice(category_id_index,1);
            console.log("배열삭제 된 후"+find_category)
            $('#category').val(find_category.join(','))
            $(this).remove();
             
        })

        
        
        
        
    });
</script>